#!/bin/sh

set -e

show_help() {
    cat << EOF

Simple tool to generate Mender Artifacts that contain Mender Orchestrator manifests.

Usage: $0 [options] <manifest> [-- [options-for-mender-artifact] ]

    Options: [ -n|artifact-name -t|--system-type -o|--output_path -h|--help ]

        --artifact-name       - Artifact name (if not given it will be taken from the manifest)
        --system-type         - System types compatible with the artifact (can be given more than once)
        --output-path         - Path to output file. Default: orchestrator-manifest.mender
        --help                - Show help and exit
        manifest              - Manifest to bundle in the update

Anything after a '--' gets passed directly to the mender-artifact tool.

EOF
}

show_help_and_exit_error() {
    show_help
    exit 1
}

check_dependency() {
    if ! which "$1" > /dev/null; then
        echo "The $1 utility is not found but required to generate Artifacts." 1>&2
        return 1
    fi
}

if ! check_dependency mender-artifact; then
    echo "Please follow the instructions here to install mender-artifact and then try again: https://docs.mender.io/downloads#mender-artifact" 1>&2
    exit 1
fi

system_types=""
artifact_name=""
output_path="orchestrator-manifest.mender"
manifest_file=""
passthrough_args=""

while [ -n "$1" ]; do
    case "$1" in
        --system-type | -t)
            if [ -z "$2" ]; then
                show_help_and_exit_error
            fi
            system_types="$system_types -t $2"
            shift 2
            ;;
        --artifact-name | -n)
            if [ -z "$2" ]; then
                show_help_and_exit_error
            fi
            artifact_name=$2
            shift 2
            ;;
        --output-path | -o)
            if [ -z "$2" ]; then
                show_help_and_exit_error
            fi
            output_path=$2
            shift 2
            ;;
        -h | --help)
            show_help
            exit 0
            ;;
        --)
            shift
            passthrough_args="$passthrough_args $@"
            break
            ;;
        -*)
            echo "Error: unsupported option $1"
            show_help_and_exit_error
            ;;
        *)
            if [ -n "$manifest_file" ]; then
                echo "Manifest already specified. Unrecognized argument \"$1\""
                show_help_and_exit_error
            fi
            manifest_file="$1"
            shift
            ;;
    esac
done

if [ -z "${artifact_name}" ]; then
    # If Artifact name is not specified, grab it from the manifest.
    artifact_name="$(sed -Ene '/^version:/ { s/^version: *"?//; s/"? *$//; p; };' "${manifest_file}")"
    if [ -z "${artifact_name}" ]; then
        echo "Artifact name not specified, and no version found in manifest. Aborting."
        show_help_and_exit_error
    fi
fi

if [ -z "${system_types}" ]; then
    echo "System type not specified. Aborting."
    show_help_and_exit_error
fi

if [ -z "${manifest_file}" ]; then
    echo "Manifest file not specified. Aborting."
    show_help_and_exit_error
fi

# Check the the passthrough_args and potentially modify them
# to avoid conflicts or to let them override the already args
# provided to mender-artifact
# Runs in a subshell to allow overriding some parameters passed
# to mender-artifact
passthrough_args_modified=" "
echo -n $passthrough_args | xargs -n 2 printf "%s %s\n" | (while read -r flag arg; do
    if [ -n "$flag" ] && [ -n "$arg" ]; then
        case $flag in
            -T | --type)
                echo "Error: Conflicting flag '$flag'. Already specified by the script."
                exit 1
                ;;
            -o | --output-path)
                output_path=$arg
                ;;
            -n | --name)
                artifact_name=$arg
                ;;
            *)
                passthrough_args_modified="$passthrough_args_modified $flag $arg"
                ;;
        esac
    fi
done

mender-artifact write module-image \
    --type mender-orchestrator-manifest \
    $system_types \
    --output-path $output_path \
    --artifact-name $artifact_name \
    --file $manifest_file \
    --software-filesystem data-partition \
    $passthrough_args_modified


echo "Artifact $output_path generated successfully:"
mender-artifact read $output_path
# End of subshell
)
exit 0
